
sudo apt install -y openvswitch-testcontroller
# Single switch topology with 3 hosts
sudo mn --topo single,3 --mac --switch ovsk --controller=default

# Linear topology with 3 switches
sudo mn --topo linear,3 --mac --switch ovsk --controller=default

# Tree topology with depth 2 and fanout 2
sudo mn --topo tree,depth=2,fanout=2 --mac --switch ovsk --controller=default



sudo apt install -y openvswitch-testcontroller


nodes

net

pingall

h1 ping h2

h1 ifconfig

h1

dump

link h1 s1 up

h1 route

sh ovs-ofctl dump-flows s1

sh ovs-ofctl add-flow s1 "in_port=1,actions=drop"

sh ovs-ofctl add-flow s1 "in_port=1,actions=output:2"



#################################################################################


sh ovs-ofctl add-flow s1 "in_port=2,actions=output:1"
sh ovs-ofctl add-flow s1 "in_port=1,actions=output:3"
sh ovs-ofctl add-flow s1 "in_port=3,actions=output:1"
sh ovs-ofctl add-flow s1 "in_port=2,actions=output:3"
sh ovs-ofctl add-flow s1 "in_port=3,actions=output:2"

#################################################################################

sh ovs-ofctl add-flow s1 "in_port=1,actions=normal"
sh ovs-ofctl add-flow s1 "in_port=2,actions=normal"
sh ovs-ofctl add-flow s1 "in_port=3,actions=normal"

#################################################################################

sh ovs-ofctl add-flow s1 "in_port=s1-eth1,actions=output:s1-eth2"


sh ovs-ofctl del-flows s1 "in_port=1"

h1 python3 -m http.server 80 &

h2 wget -O - h1

h1 arp -n

h1 route -n

h1 ping -c 4 h2



curl -u admin:admin -H "Content-Type: application/json" -X PUT \
--data @port_block.json \
http://<ODL_IP>:8181/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/0/flow/1




















#########################################################################
# vlan
#########################################################################


#!/usr/bin/env python
from mininet.node import Host
from mininet.topo import Topo
from mininet.util import quietRun
from mininet.log import error

class VLANHost( Host ):
    "Host connected to VLAN interface"

    def config( self, vlan=100, **params ):
        """Configure VLANHost according to (optional) parameters:
           vlan: VLAN ID for default interface"""

        r = super( VLANHost, self ).config( **params )

        intf = self.defaultIntf()
        # remove IP from default, "physical" interface
        self.cmd( 'ifconfig %s inet 0' % intf )
        # create VLAN interface
        self.cmd( 'vconfig add %s %d' % ( intf, vlan ) )
        # assign the host's IP to the VLAN interface
        self.cmd( 'ifconfig %s.%d inet %s' % ( intf, vlan, params['ip'] ) )
        # update the intf name and host's intf map
        newName = '%s.%d' % ( intf, vlan )
        # update the (Mininet) interface to refer to VLAN interface name
        intf.name = newName
        # add VLAN interface to host's name to intf map
        self.nameToIntf[ newName ] = intf

        return r

hosts = { 'vlan': VLANHost }


def exampleAllHosts( vlan ):
    """Simple example of how VLANHost can be used in a script"""
    # This is where the magic happens...
    host = partial( VLANHost, vlan=vlan )
    # vlan (type: int): VLAN ID to be used by all hosts

    # Start a basic network using our VLANHost
    topo = SingleSwitchTopo( k=2 )
    net = Mininet( host=host, topo=topo )
    net.start()
    CLI( net )
    net.stop()

# pylint: disable=arguments-differ

class VLANStarTopo( Topo ):
    """Example topology that uses host in multiple VLANs

       The topology has a single switch. There are k VLANs with
       n hosts in each, all connected to the single switch. There
       are also n hosts that are not in any VLAN, also connected to
       the switch."""

    def build( self, k=2, n=2, vlanBase=100 ):
        s1 = self.addSwitch( 's1' )
        for i in range( k ):
            vlan = vlanBase + i
            for j in range(n):
                name = 'h%d-%d' % ( j+1, vlan )
                h = self.addHost( name, cls=VLANHost, vlan=vlan )
                self.addLink( h, s1 )
        for j in range( n ):
            h = self.addHost( 'h%d' % (j+1) )
            self.addLink( h, s1 )


def exampleCustomTags():
    """Simple example that exercises VLANStarTopo"""

    net = Mininet( topo=VLANStarTopo() )
    net.start()
    CLI( net )
    net.stop()

if __name__ == '__main__':
    import sys
    from functools import partial

    from mininet.net import Mininet
    from mininet.cli import CLI
    from mininet.topo import SingleSwitchTopo
    from mininet.log import setLogLevel

    setLogLevel( 'info' )

    if not quietRun( 'which vconfig' ):
        error( "Cannot find command 'vconfig'\nThe package",
               "'vlan' is required in Ubuntu or Debian,",
               "or 'vconfig' in Fedora\n" )
        exit()

    if len( sys.argv ) >= 2:
        exampleAllHosts( vlan=int( sys.argv[ 1 ] ) )
    else:
        exampleCustomTags()



sudo apt-get install vlan
sudo mn --custom vlanhost.py --host vlan,vlan=1000


